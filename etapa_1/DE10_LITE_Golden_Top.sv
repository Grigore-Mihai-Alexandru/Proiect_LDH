// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


logic sys_clk;
logic spi_clk;

logic sdo;
logic sdo_en;

logic button_pressed; // button detector button_pressed

logic [7:0] data_o; // data out from the SPI module


//=======================================================
//  Structural coding
//=======================================================

spi_pll	spi_pll_inst (
	.areset 	( ~KEY[0] 		),
	.inclk0 	( MAX10_CLK1_50 ),
	.c0 		( sys_clk 		),
	.c1 		( spi_clk 		),
	.locked 	( LEDR[9]		)
);


spi_phy spi_phy_inst (
	.clk_i			( sys_clk		),
	.spi_clk_i		( spi_clk		),
	.rst_ni			( KEY[0]			),

	.req_i			( button_pressed), // ~KEY[1]
	.rw_ni			( 1'b1			),
	.addr_i			( SW[5:0]		),
	.wr_data_i		( 8'b0			),
	.ack_o			( LEDR[8]		),
	.rd_data_o		( data_o			),

	.spi_cs_no		( GSENSOR_CS_N	),
	.spi_clk_o		( GSENSOR_SCLK	),
	.spi_data_i		( GSENSOR_SDI	),
	.spi_data_o 	( sdo				),
	.spi_oe_o 		( sdo_en			)
);

edge_detector buton_detector(
	.clk_i			( sys_clk		 	),
	.rst_ni			( KEY[0]		 		),
	.button_ni		( KEY[1]		 		),
	.pressed_o		( button_pressed 	)
);

led_register led_register_inst(
	.clk_i			( sys_clk		),
	.rst_ni			( KEY[0]		 	),
	.data_i			( data_o		 	),
	.ack_i			( LEDR[8]		),
	.led_o			( LEDR[7:0]		)
);


assign GSENSOR_SDI = sdo_en ? sdo : 1'bz;
//un modul nou pentru detector de front    facut

//de implementat un registru care sa retina valoarea citita   FACUT

endmodule
